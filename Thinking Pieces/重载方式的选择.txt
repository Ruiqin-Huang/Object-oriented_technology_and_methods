两种重载方式的选择
多数情况下，将运算符重载为类的成员函数和类的友元函数都是可以的，但两者各具特点：

1,一般，单目运算符最好重载为类的成员函数，双目运算符最好重载为类的友元函数。

2,若一个运算符的操作需要修改对象的状态，选择重载为成员函数较好。

3,若运算符的操作数（尤其是第一个操作数）可能有隐式类型转换，则只能选用友元函 数。

4,具有对称性的运算符可能转换任意一端的运算对象，如：算术(a+b和b+a)、关系运算 符(a>b和b<a)等，通常重载为友元函数。

5,有4个运算符必须重载为类的成员函数：赋值＝、下标[ ]、调用( )、成员访问->。




Q&A

重载方式的选择：若运算符的操作数（尤其是第一个操作数）可能有隐式类型转换，则只能选用友元函数。 为什么

如果运算符的操作数（尤其是第一个操作数）希望有隐式类型转换，则只能选用友元函数。这是因为如果重载为成员函数，那么第一个操作数必须是该类的对象，而不会进行隐式类型转换。但是，如果重载为友元函数，则可以对第一个操作数进行隐式类型转换1。

什么是隐式类型转换

隐式类型转换，也称自动类型转换，是指不需要书写代码，由系统自动完成的类型转换1。例如，当一个整数和一个浮点数相加时，整数会被隐式地转换为浮点数，然后再进行运算。
int a = 5;
double b = 2.3;
double c = a + b;
在这个例子中，当执行 a + b 时，整数 a 会被隐式地转换为浮点数 5.0，然后再与 b 相加。这样，结果 c 就是 7.3。