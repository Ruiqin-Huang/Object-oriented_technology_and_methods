C++标准库对左移运算符<<和右移运算符>>分别进行了重载，使其能够用于不同数 据的输入输出。
对于基本类型数据（如bool、int、double等）和标准库所包含的 类（如string、complex、ofstream、ifstream等）可以直接使用输入运算符“>>”、
输出运算符“<<”进行读写操作。对于自己定义的新数据类型（如：类对象）则需要重载这两个运算符。

cout<<obj1 <<endl;  cin>>obj1;   //cout是ostream类的对象，cin是istream类的 对象

由于输入输出操作的第一个操作数为ostream/istream对象，也就是说左侧的运算 对象必须是ostream/istream对象，如果重载成类的成员函数，
则左侧的操作对 象将是我们定义的一个类对象（需要修改标准库中的类，显然不是我们所期望 的）。因此输入输出运算符不可重载为类的成员函数，
只能重载为非成员函数 （全局函数，友元函数）。

重载“<<”和“>>”运算符的一般格式为：

istream& operator>>(istream&, 类对象引用);         //输入运算符>>重载

ostream& operator<<(ostream&, const 类对象引用);    //输出运算符<<重载

说明
（1）对于输入运算符来说，第一个参数是istream对象的引用，第二个参数是要 向其中存入数据的对象，不能为常量。返回istream类对象的引用
（可作为下次调 用时的第一个参数），是为了能够连续读取：cin>>c1>>c2;，让代码书写更加漂亮。 如果不返回引用，就只能一个一个地读取：cin>>c1;  cin>>c2;

cin>> c; 可以理解为：operator >> (cin , c);

（2）对于输出运算符“<<”来说，第一个参数是ostream对象引用，因为向流中 写入数据会改变流的状态 ，所以不能用const修饰ostream对象。
由于采用了引用 的方式进行参数传递，并且也返回了对象的引用，所以重载后的运算符可以实现连 续输出。

cout<< c; 可以理解为：operator<< (cout , c);
